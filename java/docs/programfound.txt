water fall approach-
You go through these methodology step by step, completely finishing each step, getting signed off and moving on to the next one.
 Sounds like a good approach. 
 Just one problem. 
 It doesn't work. 
 The moment you get to implementation to writing code you are going to hit problems you didn't think off. 
 You are going to get new requirements that will make whatever you wrote in the first phase seem like a joke. 
 Your customer is going to change their mind, you are going to change your mind. So this kind of approach might work for building a suspension bridge.
 
 agile iterative approach- much affect approach 
 
 Object oriented languages-set of ideas that are supported by many languages
 
 Object-self contained, own attributes
 -information that describes there own state and have there own behavior
 
 Class- Class is a blue print of an object or description
 describes attributes and behaviors / propertiesb/behaviors
 instanstiation- create instance of a class.
 
 Four things to keep in mind when createing classes
 APIE
 Abstraction- Abstraction means we focus on the essential qualities of something rather than one specific example. Break down to simpliest form. One bank account class
 encapsulation-data hiding.
 -Encapsulation can be described as a protective barrier that prevents the code and data from being randomly accessed by other code, defined outside the class.

 Inheritance- Inheritance is when one class is created from another. Inheritance is also a benefit of object-oriented programming. 
The new class "inherits" all the instance data and methods from the base class, thus reducing data redundancy.

The benefit of inheritance is that we can define one base class, such as the "bug class," and then extend that to other classes that inherit these characteristics plus more.
It reduces the amount of coding we need to do. When we use inheritance, we use key words, "extends" and "implements." To sum up, inheritance is when one object acquires the properties from another object.

example - bug can have many types of bugs
is-a relationship- ladybug is a bug
car is vehicle
superClass and subClass
use extends keyword

PolyMorphism- one or object that have  method that does a differnt thing

If we wanted to simulate a grasshopper moving, it would jump. But when a ladybug moves, it flies. The same word move has two implementations. 
This problem can be solved using polymorphism. It enables one common interface for many implementations and for objects to act differently under different circumstances. So the bug class would have a generic move method defined that crawls.
 An ant can use the base method because an ant crawls, but each of the inherited classes would redefine this method with their specific types of move methods.
 
 example the + sign- can add and cat
 
 
 Object-O  processes
 1. gather requirments
 2.descripe the app
 3. identify main objects
 4. describe interactions- sequences diagram
 5. class diagram
 
 
 static- works on the class itself. Class level variable. Example each savings account has the same interest rate across all objects
 To access the static you use the class Name SavingAccount.getInterstrate();
 
 Abstraction classes-concrete class never instantiated, contains methods that are inherited
 
 interfaces-List of methods that are not implemented. allow multiple inheritance
 keyword implements must implement those methods
 
 agrgregation - has a relationship a "customer has a address" " classrom has many student"
 
 composition- ownership has  relatiinship but all objects get deleted- documnet has page but if we delete the document it deletes all pages
 
 