Primitives- numberr, characters and booleans
Numbers- byte- 8 bits -127.127
short - 16
int -32
long- 64

double- 32
float- 64

Helper classes- used to convert one data type to another- Integer, Double, Long. Float

Double obj = new Double(2.45);
obj.intValue;
obj.toString()'

Currency
BigDecimal- Used from calculations- first convert to a string
BigInteger
widening the type- when go from int to long
narrowing type= when go from long to int- losing data

int test =10;
test++- will equal 10 here
test= 11 here

++test = 11 here
test = 11 here

compare string values with the equals() method

instantiation- instance of a  class
instance variable- member of the instance of the class
instance method- member of the instance of the class

String - collection of characters or array
immutable- cant change the value

new loop
   for (String color : strings) {
            System.out.println(color);
        }
		
HashMap- unordered

 List<String> list = new ArrayList<String>();
        list.add("California");
        list.add("Oregon");
        list.add("Washington");
     list.forEach(System.out::println);


encapsulation- Break application down into smaller pieces. Restrict access to methods an varaibles,Pulic private or protected
-breaking code down makes it easier to test
-instance methods setters/getters
-Packaging complex functionality for ease of programming and hiding complex functionality in methods is called

Nest class -Used in android- only avaialble to that class    class InputHelper {
        private String getInput(String prompt) {
            System.out.print(prompt);
            Scanner sc = new Scanner(System.in);
            return sc.nextLine();
        }
    }
	
Constructors- same name as the class, no return type

Final static varaible- only created once

Enums-
public enum OliveName {

Inheritance-  Inheritance means that there's a relationship between classes in your application that lets you inherit or extend functionality from one class to another
Parent/child- super class/subclass

polymorphism-

Interface
 Inheritance means that there's a relationship between classes in your application that lets you inherit or extend functionality from one class to another